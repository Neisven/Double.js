/// <reference types="node" />
import { EventEmitter } from "node:events";
interface EventDataMap<K, V> {
    create: {
        tables: string[];
        path: string;
        extname: string;
        key: K;
        value: V | undefined;
    };
    update: {
        tables: string[];
        path: string;
        extname: string;
        key: K;
        value: V | undefined;
    };
    delete: {
        tables: string[];
        path: string;
        extname: string;
        key: K;
        value: V | undefined;
    };
    deleteAll: {
        tables: string[];
        path: string;
        extname: string;
        value: {
            K: V;
        };
    };
    ready: KeyValue<K, V>;
}
interface EventDataMap2<K, V> {
    create: undefined;
    update: {
        tables: string[];
        path: string;
        extname: string;
        key: K;
        value: V | undefined;
    };
    delete: undefined;
    deleteAll: undefined;
    ready: undefined;
}
/**
 * Represents a key-value store with event handling capabilities.
 * @extends EventEmitter
 * @template K - Type of keys
 * @template V - Type of values
 */
declare class KeyValue<K, V> extends EventEmitter {
    #private;
    /**
     * Path where the database is stored.
     */
    path: string;
    /**
     * Array of table names in the database.
     */
    tables: string[];
    /**
     * File extension for table storage files.
     */
    extname: string;
    /**
     * Constructs a new KeyValue instance.
     * @param {Object} options - Configuration options for KeyValue.
     * @param {string} options.path - Path where the database is stored.
     * @param {string[]} options.tables - Array of table names in the database.
     * @param {string} options.extname - File extension for table storage files.
     */
    constructor(options?: {
        path?: string;
        tables?: string[];
        extname?: string;
    });
    /**
     * Adds an event listener for the specified event.
     * @template T - Type of event
     * @param {T} event - Event name
     * @param {Function} listener - Event listener function
     * @returns {this} The current KeyValue instance
     * @override
     */
    on<T extends keyof EventDataMap<K, V>>(event: T, listener: (data: EventDataMap<K, V>[T], data2: EventDataMap2<K, V>[T]) => void): this;
    /**
     * Sets a key-value pair in a specified table.
     * @param {string} table - Name of the table
     * @param {K} key - Key to set
     * @param {V} value - Value to set
     * @returns {this} The current KeyValue instance
     * @emits {update} When a key-value pair is updated
     */
    set(table: string, key: K, value: V): this;
    /**
     * Retrieves the value associated with a key in a specified table.
     * @param {string} table - Name of the table
     * @param {K} key - Key to retrieve
     * @returns {V | undefined} The value associated with the key, or undefined if not found
     */
    get(table: string, key: K): V | undefined;
    /**
     * Retrieves all key-value pairs in a specified table.
     * @param {string} table - Name of the table
     * @returns {Object} All key-value pairs in the table
     */
    all(table: string): {
        K: V;
    };
    /**
     * Clears all key-value pairs in a specified table.
     * @param {string} table - Name of the table
     * @returns {this} The current KeyValue instance
     * @emits {deleteAll} When all key-value pairs in the table are deleted
     */
    delete(table: string, key: K, oldValues?: boolean): void | V;
    /**
     * Clears all key-value pairs in a specified table.
     * @param {string} table - Name of the table
     * @returns {this} The current KeyValue instance
     * @emits {deleteAll} When all key-value pairs in the table are deleted
     */
    clear(table: string): this;
    /**
     * Checks if a key exists in a specified table.
     * @param {string} table - Name of the table
     * @param {K} key - Key to check
     * @returns {boolean} True if the key exists, false otherwise
     */
    has(table: string, key: K): boolean;
    /**
     * Iterates over all key-value pairs in a specified table and executes a callback function.
     * @param {string} table - Name of the table
     * @param {Function} callback - Callback function to execute for each key-value pair
     */
    forEach(table: string, callback: (value: V, key: K, db: any) => void): void;
    /**
     * Retrieves a specific key-value pair from a specified table.
     * @param {string} table - Name of the table
     * @param {K} key - Key to retrieve
     * @returns {Object | undefined} The key-value pair, or undefined if not found
     */
    filter(table: string, filterFn: (value: V, key: K, db: any) => boolean): [K, V][];
    /**
     * Retrieves a specific key-value pair from a specified table.
     * @param {string} table - Name of the table
     * @param {K} key - Key to retrieve
     * @returns {Object | undefined} The key-value pair, or undefined if not found
     */
    at(table: string, key: K): {
        K: V;
    } | undefined;
    /**
     * Retrieves a random key-value pair from a specified table.
     * @param {string} table - Name of the table
     * @returns {V | undefined} A random value, or undefined if the table is empty
     */
    randomAt(table: string): V | undefined;
    /**
     * Retrieves all keys from a specified table.
     * @param {string} table - Name of the table
     * @returns {Array<K>} Array of keys in the table
     */
    keys(table: string): K[];
    /**
     * Retrieves all values from a specified table.
     * @param {string} table - Name of the table
     * @returns {Array<V>} Array of values in the table
     */
    values(table: string): V[];
    /**
     * Retrieves the length of key-value pairs in a specified table.
     * @param {string} table - Name of the table.
     * @returns {{ key: number, value: number }} - Object containing key and value counts.
     */
    length(table: string): {
        key: number;
        value: number;
    };
    /**
     * Checks if a table exists.
     * @param {string} tableName - Name of the table to check.
     * @returns {boolean} - True if the table exists, otherwise false.
     */
    hasTable(tableName: string): boolean;
    /**
     * Checks if a given string is a valid table name.
     * @param {string} table - Name of the table to check.
     * @returns {boolean} - True if it's a valid table, otherwise false.
     */
    isTable(table: string): boolean;
    /**
     * Establishes a connection and emits a 'ready' event.
     * @emits ready - Emitted when the KeyValue instance is ready.
     */
    connect(): void;
}
export { KeyValue };
